list(APPEND CMAKE_MODULE_PATH ${CMAKE_BINARY_DIR})
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

function(simple_build dir type)
	string(CONCAT scriptfile ${dir} "/" "build.cmake")
	if(EXISTS "${PROJECT_SOURCE_DIR}/${scriptfile}")
		include(${scriptfile})
	endif()
	file(GLOB srcfilesall CONFIGURE_DEPENDS "${dir}/*.cpp")
	set(srcfiles ${srcfilesall})
	set(testfiles ${srcfilesall})
	list(FILTER srcfiles EXCLUDE REGEX "^.*test_.*cpp$")
	list(FILTER testfiles INCLUDE REGEX "^.*test_.*cpp$")
	set(alldeps "")
	if(deps)
		list(APPEND alldeps ${deps})
	endif()
	if(public_deps)
		list(APPEND alldeps ${public_deps})
	endif()
	FOREACH(alldep ${alldeps})
		string(REPLACE "::" ";" parts ${alldep})
		list(GET parts 0 pkg)
		list(LENGTH parts len)
		if(${len} GREATER 1)
			list(SUBLIST parts 1 -1 comps)
		else()
			set(comps "")
		endif()
		find_package(${pkg} REQUIRED ${comps})
	ENDFOREACH()
	string(REPLACE "/" "_" tgt ${dir})
	if(${type} STREQUAL "lib")
		add_library(${tgt} ${srcfiles})
	else()
		add_executable(${tgt} ${srcfiles})
	endif()
	message(STATUS "testfiles: ${testfiles}")
	if(testfiles)
		set(hastests 1)
	endif()
	if(hastests)
		add_executable("test_${tgt}" ${testfiles})
	endif()
	target_include_directories(${tgt} PRIVATE ${PROJECT_SOURCE_DIR})
	if(publicdeps)
		target_link_libraries(${tgt} PUBLIC ${publicdeps})
		if(hastests)
			target_link_libraries("test_${tgt}" PUBLIC ${publicdeps})
		endif()
	endif()
	if(deps)
		target_link_libraries(${tgt} PRIVATE ${deps})
		if(hastests)
			target_link_libraries("test_${tgt}" PRIVATE ${deps})
			target_link_libraries("test_${tgt}" PRIVATE gtest_main)
		endif()
	endif()
	if(libs)
		foreach(lib ${libs})
			target_link_libraries(${tgt} PRIVATE "lib_${lib}")
			if(hastests)
				target_link_libraries("test_${tgt}" PRIVATE "lib_${lib}")
			endif()
		endforeach()
	endif()
	if(hastests)
		gtest_discover_tests("test_${tgt}")
	endif()
endfunction()

function(autobuild)
	SUBDIRLIST(SUBDIRS "${PROJECT_SOURCE_DIR}/lib")
	foreach(subdir ${SUBDIRS})
		message(STATUS "Building lib ${subdir}")
		simple_build("lib/${subdir}" lib)
	endforeach()
	SUBDIRLIST(SUBDIRS "${PROJECT_SOURCE_DIR}/app")
	foreach(subdir ${SUBDIRS})
		message(STATUS "Building app ${subdir}")
		simple_build("app/${subdir}" lib)
	endforeach()
endfunction()

function(use_gtest)
	include(FetchContent)
	FetchContent_Declare(
			googletest
			URL https://github.com/google/googletest/archive/609281088cfefc76f9d0ce82e1ff6c30cc3591e5.zip
	)
	FetchContent_MakeAvailable(googletest)
	include(GoogleTest)
	enable_testing()
endfunction()